<?xml version="1.0" encoding="iso-8859-1"?>

<web-app id="solrfacetsearch" version="3.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
         metadata-complete="true">
  <absolute-ordering />

    <display-name>solrfacetsearch</display-name>

    <welcome-file-list>
        <welcome-file>admin.html</welcome-file>
    </welcome-file-list>

    <login-config>
        <auth-method>BASIC</auth-method>
    </login-config>

    <filter>
        <filter-name>HybrisSolrDispatchFilter</filter-name>
        <filter-class>de.hybris.platform.solrfacetsearch.solr.web.HybrisSolrDispatchFilter</filter-class>
        <init-param>
            <param-name>path-prefix</param-name>
            <param-value>/solrfacetsearch</param-value>
        </init-param>
    </filter>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <!-- Spring Security filter to protect the Solr admin ui -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <!--
       Filter that will do initialization work for each web application which
       include: - Getting the JaloSession from the HttpSession or, if not
       available, create a new JaloSession - Activate this JaloSession so
       that calls to JaloSession.getCurrentSession() can be performed. -
       Iterate through all managers and call the doPreRequest(..) method.
   -->
    <filter>
        <filter-name>solrfacetsearchFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <!-- XSS prevention filter -->
    <filter>
        <filter-name>XSSFilter</filter-name>
        <filter-class>de.hybris.platform.servicelayer.web.XSSFilter</filter-class>
    </filter>


    <filter-mapping>
        <filter-name>XSSFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>solrfacetsearchFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter-mapping>
        <filter-name>HybrisSolrDispatchFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- servlets -->
    <servlet>
        <servlet-name>Zookeeper</servlet-name>
        <servlet-class>org.apache.solr.servlet.ZookeeperInfoServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>LoadAdminUI</servlet-name>
        <servlet-class>org.apache.solr.servlet.LoadAdminUiServlet</servlet-class>
    </servlet>

    <!-- Remove in Solr 5.0 -->
    <!-- This sends SC_MOVED_PERMANENTLY (301) for resources that changed in 4.0 -->
    <servlet>
        <servlet-name>RedirectOldAdminUI</servlet-name>
        <servlet-class>org.apache.solr.servlet.RedirectServlet</servlet-class>
        <init-param>
            <param-name>destination</param-name>
            <param-value>${context}/#/</param-value>
        </init-param>
    </servlet>

    <servlet>
        <servlet-name>RedirectOldZookeeper</servlet-name>
        <servlet-class>org.apache.solr.servlet.RedirectServlet</servlet-class>
        <init-param>
            <param-name>destination</param-name>
            <param-value>${context}/zookeeper</param-value>
        </init-param>
    </servlet>

    <servlet>
        <servlet-name>RedirectLogging</servlet-name>
        <servlet-class>org.apache.solr.servlet.RedirectServlet</servlet-class>
        <init-param>
            <param-name>destination</param-name>
            <param-value>${context}/#/~logging</param-value>
        </init-param>
    </servlet>


    <servlet>
        <servlet-name>SolrRestApi</servlet-name>
        <servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
        <init-param>
            <param-name>org.restlet.application</param-name>
            <param-value>org.apache.solr.rest.SolrRestApi</param-value>
        </init-param>
    </servlet>

    <!-- Servlet Mapping -->
    <servlet-mapping>
        <servlet-name>Zookeeper</servlet-name>
        <url-pattern>/zookeeper</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>LoadAdminUI</servlet-name>
        <url-pattern>/admin.html</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>SolrRestApi</servlet-name>
        <url-pattern>/schema/*</url-pattern>
    </servlet-mapping>


    <servlet-mapping>
        <servlet-name>RedirectOldAdminUI</servlet-name>
        <url-pattern>/admin/</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>RedirectOldAdminUI</servlet-name>
        <url-pattern>/admin</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>RedirectOldZookeeper</servlet-name>
        <url-pattern>/zookeeper.jsp</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>RedirectLogging</servlet-name>
        <url-pattern>/logging</url-pattern>
    </servlet-mapping>


    <mime-mapping>
        <extension>.xsl</extension>
        <!-- per http://www.w3.org/TR/2006/PR-xslt20-20061121/ -->
        <mime-type>application/xslt+xml</mime-type>
    </mime-mapping>

    <welcome-file-list>
        <welcome-file>admin.html</welcome-file>
    </welcome-file-list>


    <!--
        Enabling a Spring web application context with 'session' and 'request'
        scope. - The 'contextConfigLocation' param specifies where your
        configuration files are located. - The HybrisContextLoaderListener
        extends the usual SpringContextLoaderListener (which loads the context
        from specified location) by adding the global application context of
        the platform as parent context. With having the global context set as
        parent you can access or override beans of the global context and get
        the 'tenant' scope. - The RequestContextListener is needed for
        exposing the 'request' scope to the context. Furthermore it is needed
        when overriding the 'jalosession' bean for your web application.
    -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            WEB-INF/solrfacetsearch-web-spring.xml,
            WEB-INF/solrfacetsearch-spring-security.xml
        </param-value>
    </context-param>

    <listener>
        <listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
</web-app> 
