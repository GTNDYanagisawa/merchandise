<?xml version="1.0"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.

  
-->
<!-- 

XXXX

 -->
<project name="project.assembling">

	<macrodef name="buildwar">
		<attribute name="extname" />
		<attribute name="destdir" default="WAR" />
		<sequential>
			<!-- Create temp folder, make like for ear-->
			<delete dir="${HYBRIS_TEMP_DIR}/@{destdir}" failonerror="false" />
			<!-- copy platform resources, make like for ear  -->
			<ear_copy_resources destdir="@{destdir}" />
			<yAppendJars2Manifest earPath="${HYBRIS_TEMP_DIR}/@{destdir}" manifest="${HYBRIS_TEMP_DIR}/@{destdir}/warmanifest.tmpl" />
			<ear_copy_extension extname="@{extname}" destdir="${HYBRIS_TEMP_DIR}/@{destdir}" />
		</sequential>
	</macrodef>

	<macrodef name="ear_copy_resources">
		<attribute name="destdir" />
		<sequential>
			<if>
				<isset property="glassfish" />
				<then>
					<property name="lib_dest_dir" value="lib" />
				</then>
				<else>
					<property name="lib_dest_dir" value="libs" />
				</else>
			</if>

			<filter token="extensions.ear.webmodules" value="${extensions.ear.webmodules}" />
			<!-- Merge preferrerd application packages for WebLogic from all extensions -->
            <ygenweblogicpackages/>
            <filter token="weblogic.prefer-application-packages" value="${weblogic.prefer-application-packages}" />

			<!--libs folder-->
			<copy filtering="false" todir="${HYBRIS_TEMP_DIR}/@{destdir}/${lib_dest_dir}">
				<fileset dir="${platformhome}/resources/ear/libs" />
				<fileset dir="${platformhome}/lib/dbdriver">
					<include name="**/**" />
				</fileset>
			</copy>

			<!-- platform folder -->
			<copy filtering="false" todir="${HYBRIS_TEMP_DIR}/@{destdir}/bin/platform">
				<fileset file="${platformhome}/project.properties" />
				<fileset file="${platformhome}/extensions.xml" />
				<fileset file="${platformhome}/tenant_*.properties" />
			</copy>

			<echo>Copying ${platformhome}/bootstrap/bin/models.jar into  ${HYBRIS_TEMP_DIR}/@{destdir}/${lib_dest_dir} </echo>
			<copy filtering="false" todir="${HYBRIS_TEMP_DIR}/@{destdir}/${lib_dest_dir}">
				<fileset file="${platformhome}/bootstrap/bin/models.jar" />
			</copy>

			<copy filtering="false" todir="${HYBRIS_TEMP_DIR}/@{destdir}/bin/platform/resources">
				<fileset file="${platformhome}/resources/advanced.properties" />
			</copy>

			<!--repack because manifest of original bootstrap.jar cannot be read by websphere -->
			<jar jarfile="${HYBRIS_TEMP_DIR}/@{destdir}/${lib_dest_dir}/hybrisbootstrap.jar">
				<zipfileset src="${platformhome}/bootstrap/bin/ybootstrap.jar">
				</zipfileset>
			</jar>

			<!--META-INF folder-->
			<if>
				<isset property="glassfish" />
				<then>
					<copy filtering="true" todir="${HYBRIS_TEMP_DIR}/@{destdir}">
						<fileset dir="${platformhome}/resources/ear">
							<include name="META-INF/**" />
							<exclude name="META-INF/weblogic-application.xml" />
							<exclude name="META-INF/jboss-app.xml" />
						</fileset>
					</copy>
				</then>
				<else>
					<copy filtering="true" todir="${HYBRIS_TEMP_DIR}/@{destdir}">
						<fileset dir="${platformhome}/resources/ear">
							<include name="META-INF/**" />
						</fileset>
					</copy>
				</else>
			</if>

			<!--config folder-->
			<if>
				<isset property="glassfish" />
				<then>
					<copy todir="${HYBRIS_TEMP_DIR}/@{destdir}/lib" verbose="true">
						<fileset dir="${HYBRIS_CONFIG_DIR}/licence">
							<include name="**" />
						</fileset>
					</copy>
					<copy todir="${HYBRIS_TEMP_DIR}/@{destdir}/config" verbose="true">
						<fileset dir="${HYBRIS_CONFIG_DIR}">
							<include name="security/**" />
                            <include name="solr/**" />
							<include name="localextensions.xml" />
							<include name="local.properties" />
						</fileset>
					</copy>
				</then>
				<else>
					<copy todir="${HYBRIS_TEMP_DIR}/@{destdir}/config" verbose="true">
						<fileset dir="${HYBRIS_CONFIG_DIR}">
							<include name="licence/**" />
							<include name="security/**" />
                            <include name="solr/**" />
							<include name="localextensions.xml" />
							<include name="local.properties" />
						</fileset>
					</copy>
				</else>
			</if>

			<echo append="true" file="${HYBRIS_TEMP_DIR}/@{destdir}/config/local.properties">

# Generated properties needed for production mode
hmc.debug.showjspcomments=false
hmc.developermode=false</echo>

			<!--data folder-->
			<copy todir="${HYBRIS_TEMP_DIR}/@{destdir}/data">
				<fileset dir="${HYBRIS_DATA_DIR}">
					<include name="build.number" />
				</fileset>
			</copy>

			<!-- create other env folders -->
			<mkdir dir="${HYBRIS_TEMP_DIR}/@{destdir}/bin" />
			<mkdir dir="${HYBRIS_TEMP_DIR}/@{destdir}/log" />
			<mkdir dir="${HYBRIS_TEMP_DIR}/@{destdir}/temp" />
		</sequential>
	</macrodef>

	<macrodef name="buildear">
		<attribute name="destdir" default="EAR" />
		<attribute name="tempdir" default="temp_ear" />
        <attribute name="tempwardir" default="temp_war" />
		<sequential>
			<echo message="Building platform before EAR creation" />
			<build />

			<echo message="Building 'EAR' file" />

			<!-- Create temp folder -->
			<mkdir dir="${HYBRIS_TEMP_DIR}/@{tempdir}" />
            <mkdir dir="${HYBRIS_TEMP_DIR}/@{tempwardir}" />

			<!-- copy platform resources -->
			<ear_copy_resources destdir="@{tempdir}" />

			<!-- Build extensions -->
			<foreachext>
				<do>
					<extension_build_jar extname="@{extname}" earlibdir="${HYBRIS_TEMP_DIR}/@{tempdir}/lib" />
				</do>
			</foreachext>

			<!-- Create manifests -->
			<if>
				<isset property="glassfish" />
				<then>
					<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/warmanifest.tmpl">Manifest-Version: 1.0
Created-By: hybris Platform (hybris AG)</echo>
					<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/earmanifest.tmpl">Manifest-Version: 1.0
Created-By: hybris Platform (hybris AG)</echo>
				</then>
				<else>
					<if>
						<equals arg1="${appserver}" arg2="weblogic"/>
						<then>
							<!-- Create default weblogic.xml template -->
							<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/weblogic-xml.tmpl"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<weblogic-web-app xmlns="http://xmlns.oracle.com/weblogic/weblogic-web-app">
    <container-descriptor>
        <prefer-web-inf-classes>true</prefer-web-inf-classes>
    </container-descriptor>
</weblogic-web-app>]]></echo>
						</then>
						<else>
							<yAppendJars2Manifest earPath="${HYBRIS_TEMP_DIR}/@{tempdir}" manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/warmanifest.tmpl" />
							<yAppendJars2Manifest earPath="${HYBRIS_TEMP_DIR}/@{tempdir}" manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/earmanifest.tmpl" />
						</else>
					</if>
				</else>
			</if>

	<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/warmanifest.tmpl">Manifest-Version: 1.0
Created-By: hybris Platform (hybris AG)</echo>
			<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/earmanifest.tmpl">Manifest-Version: 1.0
Created-By: hybris Platform (hybris AG)</echo>


			<!-- Copy extensions -->
			<foreachext>
				<do>
					<ear_copy_extension extname="@{extname}" destdir="${HYBRIS_TEMP_DIR}/@{tempdir}" />
				</do>
			</foreachext>

			<!-- notify all extensions -->
			<property name="ear.path" value="${HYBRIS_TEMP_DIR}/@{tempdir}" />
			<foreachext>
				<do>
					<callback extname="@{extname}" target="before_ear" />
				</do>
			</foreachext>

			<!-- remove old groovy library (from btg) -->
			<if>
				<and>
					<isset property="glassfish" />
					<available file="${HYBRIS_TEMP_DIR}/@{tempdir}/lib/groovy-1.7.4.jar" />
				</and>
				<then>
					<delete file="${HYBRIS_TEMP_DIR}/@{tempdir}/lib/groovy-1.7.4.jar" />
				</then>
			</if>

			<!--  create resources.jar -->
			<if>
				<and>
					<isset property="glassfish" />
					<available file="${HYBRIS_TEMP_DIR}/@{tempdir}/impexdata" />
				</and>
				<then>
					<echo message="creatig resources.jar" />
					<jar manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/earmanifest.tmpl" file="${HYBRIS_TEMP_DIR}/@{tempdir}/lib/resources.jar">
						<fileset dir="${HYBRIS_TEMP_DIR}/@{tempdir}/impexdata" />
					</jar>
					<delete dir="${HYBRIS_TEMP_DIR}/@{tempdir}/impexdata" />
				</then>
			</if>

            <!-- create hybris-weblogic manifest-only jar -->
            <if>
                <equals arg1="${appserver}" arg2="weblogic"/>
                <then>
					<echo file="${HYBRIS_TEMP_DIR}/@{tempdir}/weblogicmanifest.tmpl">Manifest-Version: 1.0
Created-By: hybris Platform (hybris AG)</echo>

					<yAppendJars2Manifest earPath="${HYBRIS_TEMP_DIR}/@{tempdir}" manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/weblogicmanifest.tmpl" />

					<mkdir dir="${HYBRIS_TEMP_DIR}/@{tempdir}/lib" />
					<jar manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/weblogicmanifest.tmpl" destfile="${HYBRIS_TEMP_DIR}/@{tempdir}/lib/hybris-weblogic.jar"/>
				</then>
			</if>

			<!-- zip the complete ear -->
			<mkdir dir="${HYBRIS_TEMP_DIR}/@{destdir}" />
			<jar manifest="${HYBRIS_TEMP_DIR}/@{tempdir}/earmanifest.tmpl" file="${HYBRIS_TEMP_DIR}/@{destdir}/hybrisplatform.ear">
				<fileset dir="${HYBRIS_TEMP_DIR}/@{tempdir}">
					<exclude name="hybrisplatform.ear" />
					<exclude name="earmanifest.tmpl" />
					<exclude name="warmanifest.tmpl" />
                    <exclude name="weblogicmanifest.tmpl" />
                    <exclude name="weblogic-xml.tmpl" />
				</fileset>
			</jar>

			<echo message="*********************************************************" />
			<echo message="EAR file built successful. Placed to ${HYBRIS_TEMP_DIR}/@{destdir}." />
		</sequential>
	</macrodef>

	<macrodef name="ear_copy_extension">
		<attribute name="extname" />
		<attribute name="destdir" />
        <attribute name="tempdir" default="temp_ear" />
        <attribute name="tempwardir" default="temp_war" />

		<sequential>
			<propertyregex regexp="\\" input="@{destdir}/bin" replace="/" property="destdir.normalized" override="true" defaultValue="@{destdir}/bin" />
			<propertyregex regexp="\\" input="${HYBRIS_BIN_DIR}" replace="/" property="HYBRIS_BIN_DIR.normalized" override="true" defaultValue="${HYBRIS_BIN_DIR}" />
			<propertyregex regexp="\\" input="${ext.@{extname}.path}" replace="/" property="extension.normalized" override="true" defaultValue="${ext.@{extname}.path}" />
			<propertyregex casesensitive="false" regexp="${HYBRIS_BIN_DIR.normalized}[/,\\]" input="${extension.normalized}" replace="${destdir.normalized}/" property="destdir.extension" override="true" defaultValue="${destdir.normalized}/@{extname}" />
			<propertyregex regexp="\\" input="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}/WEB-INF/tags" replace="/" property="ext.tempwar.tagspath" override="true" defaultValue="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}/WEB-INF/tags" />
			<if>
				<isset property="glassfish" />
				<then>
					<copy todir="${destdir.extension}">
						<fileset dir="${extension.normalized}">
							<exclude name="bin/**" />
							<exclude name="lib/**" />
							<exclude name="web/**" />
							<exclude name="hmc/**" />
							<exclude name="buildcallbacks.xml" />
							<exclude name="resources/**" />
							<include name="extensioninfo.xml" />
							<include name="project.properties" />
							<include name="tenant_*.properties" />
						</fileset>
					</copy>
					<if>
						<available file="${extension.normalized}/lib" />
						<then>
							<copy todir="@{destdir}/lib">
								<fileset dir="${extension.normalized}/lib">
									<include name="**" />
								</fileset>
							</copy>
						</then>
					</if>
					<if>
						<available file="${extension.normalized}/resources/security" />
						<then>
							<copy todir="@{destdir}/config/security">
								<fileset dir="${extension.normalized}/resources/security">
									<include name="**" />
								</fileset>
							</copy>
						</then>
					</if>
					<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/lib/@{extname}resources.jar">
						<fileset dir="${extension.normalized}/resources">
							<!-- <exclude name="impex/**"/> -->
						</fileset>
					</jar>
					<if>
						<available file="${extension.normalized}/resources" />
						<then>
							<var name="prop.directory.contents" unset="true" />
							<var name="prop.directory.contents.newline.separated" unset="true" />
							<fileset id="directory.contents" dir="${extension.normalized}/resources" includes="**" />
							<property name="prop.directory.contents" refid="directory.contents" />
							<propertyregex property="prop.directory.contents.newline.separated" input="${prop.directory.contents}" regexp=";" replace="${line.separator}" global="true" />
							<echo file="@{destdir}/impexdata/@{extname}.index.txt">${prop.directory.contents.newline.separated}</echo>
							<!-- <copy todir="@{destdir}/impexdata/@{extname}">	
						<fileset dir="${extension.normalized}/resources/impex"/>
					</copy> -->
						</then>
					</if>
				</then>
				<else>
					<copy todir="${destdir.extension}">
						<fileset dir="${extension.normalized}">
							<include name="bin/**" />
							<include name="lib/**" />
							<include name="resources/**" />
							<exclude name="resources/commons-logging.properties" />
							<exclude name="web/**" />
							<exclude name="hmc/**" />
							<exclude name="buildcallbacks.xml" />
							<include name="extensioninfo.xml" />
							<include name="project.properties" />
						</fileset>
					</copy>
				</else>
			</if>
			<callback extname="@{extname}" target="before_war" />
			<if>
				<isset property="ext.@{extname}.webmodule.available" />
				<then>
					<if>
						<isset property="war.exclude.filter" />
						<then>
							<echo>Filtering libraries in war :${war.exclude.filter}</echo>
							<if>
								<and>
									<isset property="glassfish" />
									<equals arg1="@{extname}" arg2="platformwebservices" />
								</and>
								<then>
									<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/@{extname}.war">
										<fileset dir="${ext.@{extname}.path}/web/webroot">
											<exclude name="sys_*/**" />
											<exclude name="WEB-INF/lib/**" />
											<exclude name="WEB-INF/classes/**" />
											<exclude name="*/**/hmc.xsd" />
											<exclude name="${war.exclude.filter}" />
											<!-- do not include content -->
										</fileset>
									</jar>
									<if>
										<available file="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" />
										<then>
											<copy todir="@{destdir}/lib">
												<fileset dir="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" />
											</copy>
										</then>
									</if>
									<if>
										<available file="${ext.@{extname}.path}/web/webroot/WEB-INF/classes" />
										<then>
											<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/lib/@{extname}server.jar">
												<fileset dir="${ext.@{extname}.path}/web/webroot/WEB-INF/classes" />
											</jar>
										</then>
									</if>
								</then>
								<else>
									<ygenmissingtldfiles implicitTldTemplate="${platformhome}/bootstrap/resources/implicit.tld"/>
									<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/@{extname}.war">
										<fileset dir="${ext.@{extname}.path}/web/webroot">
											<exclude name="sys_*/**" />
											<exclude name="*/**/hmc.xsd" />
											<exclude name="${war.exclude.filter}" />
											<!-- do not include content -->
										</fileset>
									</jar>
								</else>
							</if>
						</then>
						<else>
							<if>
								<and>
									<isset property="glassfish" />
									<equals arg1="@{extname}" arg2="platformwebservices" />
								</and>
								<then>
									<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/@{extname}.war">
										<fileset dir="${ext.@{extname}.path}/web/webroot">
											<exclude name="sys_*/**" />
											<exclude name="WEB-INF/lib/**" />
											<exclude name="WEB-INF/classes/**" />
											<exclude name="*/**/hmc.xsd" />
											<!-- do not include content -->
										</fileset>
									</jar>
									<if>
										<available file="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" />
										<then>
											<copy todir="@{destdir}/lib">
												<fileset dir="${ext.@{extname}.path}/web/webroot/WEB-INF/lib" />
											</copy>
										</then>
									</if>
									<if>
										<available file="${ext.@{extname}.path}/web/webroot/WEB-INF/classes" />
										<then>
											<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/lib/@{extname}server.jar">
												<fileset dir="${ext.@{extname}.path}/web/webroot/WEB-INF/classes" />
											</jar>
										</then>
									</if>
								</then>
								<else>
									<if>
										<!-- each extensions needs weblogic.xml descriptor -->
										<equals arg1="${appserver}" arg2="weblogic"/>
										<then>
											<!-- Copy extension to temp directory in order to add weblogic.xml descriptor before creating war -->
											<copy todir="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}">
												<fileset dir="${ext.@{extname}.path}/web/webroot">
													<exclude name="sys_*/**" />
													<exclude name="*/**/hmc.xsd" />
													<!-- do not include content -->
												</fileset>
											</copy>

											<if>
												<not>
													<available file="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}/WEB-INF/weblogic.xml"/>
												</not>
												<then>
													<!-- extension does not provide custom weblogic.xml file so we copy default  -->
													<copy file="${HYBRIS_TEMP_DIR}/@{tempdir}/weblogic-xml.tmpl" tofile="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}/WEB-INF/weblogic.xml" overwrite="false"/>
												</then>
											</if>

											<ygenmissingtldfiles implicitTldTemplate="${platformhome}/bootstrap/resources/implicit.tld"/>
											<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/@{extname}.war">
												<fileset dir="${HYBRIS_TEMP_DIR}/@{tempwardir}/@{extname}"/>
											</jar>
										</then>
										<else>
											<jar manifest="@{destdir}/warmanifest.tmpl" destfile="@{destdir}/@{extname}.war">
												<fileset dir="${ext.@{extname}.path}/web/webroot">
													<exclude name="sys_*/**" />
													<exclude name="*/**/hmc.xsd" />
													<!-- do not include content -->
												</fileset>
											</jar>
										</else>
									</if>

								</else>
							</if>
						</else>
					</if>
				</then>
			</if>
			<callback extname="@{extname}" target="after_war" />
		</sequential>
	</macrodef>

	<macrodef name="cleanear">
		<attribute name="destdir" default="EAR" />
		<attribute name="tempdir" default="temp_ear" />
        <attribute name="tempwardir" default="temp_war" />
		<sequential>
			<delete dir="${HYBRIS_TEMP_DIR}/@{tempdir}" />
			<delete dir="${HYBRIS_TEMP_DIR}/@{destdir}">
				<include name="hybrisplatform.ear" />
			</delete>
            <delete dir="${HYBRIS_TEMP_DIR}/@{tempwardir}" />
		</sequential>
	</macrodef>

	<macrodef name="cleanwar">
		<attribute name="extname" />
		<attribute name="destdir" default="WAR" />
		<sequential>
			<delete file="${HYBRIS_TEMP_DIR}/@{destdir}/@{extname}.war" failonerror="false" />
		</sequential>
	</macrodef>

	<macrodef name="cleanproduction">
		<attribute name="destdir" default="${production.output.path}" />
		<sequential>
			<delete dir="@{destdir}/bin" />
			<delete dir="@{destdir}/config" failonerror="false" />
		</sequential>
	</macrodef>


	<macrodef name="production">
		<attribute name="destdir" default="${production.output.path}" />
		<sequential>
			<if>
				<isfalse value="${production.testbuild}" />
				<then>
					<echo message="Building hybris Server Production Zips to '@{destdir}'" />
					<cleanproduction />
					<build />
				</then>
				<else>
					<echo message="Building hybris Server Production Zips to '@{destdir}' (TESTING BUILD MODE)" />
				</else>
			</if>
			<mkdir dir="@{destdir}/bin" />

			<echo message="Building hybris Server Production Zip to '@{destdir}'" />

			<!-- platform base -->
			<copy todir="@{destdir}/bin/platform" preservelastmodified="true">
				<fileset dir="${HYBRIS_BIN_DIR}/platform">
					<patternset refid="platform.production.filter" />
				</fileset>
			</copy>

			<!-- config folder -->
			<mkdir dir="@{destdir}/config" />
			<copy todir="@{destdir}/config" preservelastmodified="true">
				<fileset dir="${HYBRIS_CONFIG_DIR}">
					<exclude name="**/.settings/**" />
					<exclude name="**/.svn/**" />
					<exclude name="**/.classpath" />
					<exclude name="**/.project" />
					<exclude name="**/licence/**" />
					<exclude name="**/readme.txt" />
				</fileset>
			</copy>

			<!-- copy each extension as binary -->
			<foreachext>
				<do>
					<if>
						<contains string="${ext.@{extname}.path}" substring="${HYBRIS_BIN_DIR}" casesensitive="false" />
						<!-- TODO search for ant task which compares file paths -->
						<then>
							<var name="destdir" unset="true" />
							<property name="destdir" location="${ext.@{extname}.productionpath}" />
						</then>
						<else>
							<var name="destdir" unset="true" />
							<property name="destdir" location="@{destdir}/bin/custom/@{extname}" />
						</else>
					</if>

					<callback extname="@{extname}" target="before_production" />
					<copy_extension_for_hybris_server extname="@{extname}" srcdir="${ext.@{extname}.path}" destdir="${destdir}" />
					<callback extname="@{extname}" target="after_production" />
				</do>
			</foreachext>


			<if>
				<isfalse value="${production.testbuild}" />
				<then>

					<!--<tstamp prefix="finish">
							<format property="time" pattern="d-MMMM-yyyy_HHmm" locale="en,UK"/>
						</tstamp>
						-->
					<zip destfile="@{destdir}/hybrisServer-Platform.zip">
						<zipfileset dir="@{destdir}/bin" includes="platform/**" prefix="hybris/bin" />
					</zip>

					<zip destfile="@{destdir}/hybrisServer-AllExtensions.zip">
						<zipfileset dir="@{destdir}/bin" excludes="platform/**" prefix="hybris/bin" />
					</zip>

					<zip destfile="@{destdir}/hybrisServer-Config.zip">
						<zipfileset dir="@{destdir}/config" prefix="hybris/config" />
					</zip>

					<copy overwrite="true" todir="@{destdir}">
						<fileset dir="${platformhome}/resources/hybrisserver" includes="**" />
					</copy>
					<cleanproduction />
				</then>
			</if>
			<echo message="Finished creation of '@{destdir}/hybrisServer-*.zip'" />
		</sequential>
	</macrodef>

	<macrodef name="copy_extension_for_hybris_server">
		<attribute name="srcdir" />
		<attribute name="destdir" />
		<attribute name="extname" />
		<sequential>
			<echo level="info" message=" " />
			<echo level="info" message="*************************************************" />
			<echo level="info" message="- copy_extension_for_hybris_server" />
			<echo level="info" message="-------------------------------------------------" />
			<echo level="info" message="- srcdir:   @{srcdir}" />
			<echo level="info" message="- destdir:  @{destdir}" />
			<echo level="info" message="- extname:  @{extname}" />
			<echo level="info" message="*************************************************" />
			<echo level="info" message=" " />

			<if>
				<isreference refid="extension.@{extname}.production.filter" />
				<then>
					<copy todir="@{destdir}" preservelastmodified="true">
						<fileset dir="@{srcdir}">
							<patternset refid="extension.@{extname}.production.filter" />
						</fileset>
					</copy>
				</then>
				<else>
					<copy todir="@{destdir}" preservelastmodified="true">
						<fileset dir="@{srcdir}">
							<patternset refid="extension.production.filter" />
						</fileset>
					</copy>
				</else>
			</if>

			<if>
				<equals arg1="@{extname}" arg2="hmc" />
				<then>
					<delete failonerror="false">
						<fileset dir="@{destdir}/web/webroot/WEB-INF/lib">
							<include name="*hmc.jar" />
						</fileset>
						<fileset dir="@{destdir}/web/webroot/ext">
							<include name="**" />
						</fileset>
					</delete>
				</then>
			</if>

			<extension_build_jar extname="@{extname}" destdir="@{destdir}" />

		</sequential>
	</macrodef>

	<macrodef name="extension_build_jar">
		<attribute name="extname" />
		<attribute name="destdir" default="${ext.@{extname}.path}" />
		<attribute name="earlibdir" default="" />
		<sequential>
			<if>
				<isset property="ext.@{extname}.coremodule.available" />
				<then>
					<if>
						<available file="${ext.@{extname}.path}/classes" />
						<then>
							<if>
								<isset property="glassfish" />
								<then>
									<jar destfile="@{earlibdir}/@{extname}server.jar">
										<fileset dir="${ext.@{extname}.path}/classes" />
									</jar>
								</then>
								<else>
									<mkdir dir="@{destdir}/bin" />
									<jar destfile="@{destdir}/bin/@{extname}server.jar">
										<fileset dir="${ext.@{extname}.path}/classes" />
									</jar>
								</else>
							</if>

						</then>
					</if>

				</then>
			</if>
		</sequential>
	</macrodef>

</project>